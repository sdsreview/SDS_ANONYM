We trained a RL policy using the provided reward function code and tracked the values of the individual components in the reward function as well as global policy metrics such as episode lengths after every 10 epochs and the maximum, mean, minimum values encountered:
episode length: ['0.00', '71.50', '156.00', '156.00', '156.00', '578.20', '1002.00', '1002.00', '770.90', '504.28'], Max: 1002.00, Mean: 439.69, Min: 0.00 
rew action rate penalty: ['0.00', '958.10', '2090.39', '2090.39', '2090.39', '7911.43', '13719.47', '13719.47', '10709.31', '6896.87'], Max: 13719.47, Mean: 6018.58, Min: 0.00 
rew contact force reward: ['0.00', '7400.41', '16146.36', '16146.36', '16146.36', '57832.17', '102059.52', '102059.52', '74129.28', '47894.71'], Max: 102059.52, Mean: 43981.47, Min: 0.00 
rew dof limits penalty: ['0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '5.89', '0.22'], Max: 5.89, Mean: 0.61, Min: 0.00 
rew forward vel reward: ['0.00', '49.08', '107.09', '107.09', '107.09', '342.43', '583.21', '583.21', '465.14', '300.43'], Max: 583.21, Mean: 264.48, Min: 0.00 
rew orientation penalty: ['0.00', '21.80', '47.57', '47.57', '47.57', '149.87', '238.29', '238.29', '211.06', '147.87'], Max: 238.29, Mean: 114.99, Min: 0.00 
rew torque penalty: ['0.00', '2929.48', '6391.59', '6391.59', '6391.59', '24986.33', '44109.64', '44109.64', '32464.23', '21061.78'], Max: 44109.64, Mean: 18883.59, Min: 0.00 
rew total: ['0.00', '798.78', '1742.78', '1742.78', '1742.78', '6190.17', '10890.18', '10890.18', '7969.59', '5154.82'], Max: 10890.18, Mean: 4712.21, Min: 0.00 
Please carefully analyze the policy feedback and provide a new, improved reward function that can better solve the task. Some helpful tips for analyzing the policy feedback:
    (1) If the task score is always near zero, then you must rewrite the entire reward function
    (2) If the values for a certain reward component are near identical throughout, then this means RL is not able to optimize this component as it is written. You may consider
        (a) Changing its scale or the value of its temperature parameter
        (b) Re-writing the reward component 
        (c) Discarding the reward component
    (3) If some reward components' magnitude is significantly larger, then you must re-scale its value to a proper range
Please analyze each existing reward component in the suggested manner above first, and then write the reward function code. 
The output of the reward function should consist of two items:
    (1) the total reward (tensor with reward per environment)
    (2) a dictionary of each individual reward component (tensor with reward component per environment)
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as torch.Tensor
    (2) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.